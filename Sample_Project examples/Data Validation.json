[
    {
        "id": "a93125f3.877cf",
        "type": "tab",
        "label": "Data Validation",
        "disabled": false,
        "info": "Check objects for metadata porperty and value"
    },
    {
        "id": "c8f6a5df.5c33d8",
        "type": "inject",
        "z": "a93125f3.877cf",
        "name": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": true,
        "x": 159.83334350585938,
        "y": 360.0000228881836,
        "wires": [
            [
                "7243928e.a2b42c"
            ]
        ]
    },
    {
        "id": "7243928e.a2b42c",
        "type": "function",
        "z": "a93125f3.877cf",
        "name": "MAIN INPUTS",
        "func": "// INPUTS\n\nteamspace = \"***\";  // make sure you have permissions to acces this teamspace\nmodelID = \"***\";    // make sure you have permissions to acces this model or federation\n\n\n// ignore the rest\n\ntry{\n    flow.set(\"teamspace\", teamspace);\n}catch(error){\n    node.error(\"Missing teamspace\", msg);\n    return;\n}\ntry{\n    flow.set(\"modelID\", modelID);\n}catch(error){\n    node.error(\"Missing modelID\", msg);\n    return;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 192.54983520507812,
        "y": 202.06722259521484,
        "wires": [
            [
                "d06a44fd.dc19a8",
                "633f16e0.b034c"
            ]
        ]
    },
    {
        "id": "1721210d.d1f817",
        "type": "http request",
        "z": "a93125f3.877cf",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "url": "{{{topic}}}",
        "tls": "",
        "x": 492.33335876464844,
        "y": 182.5000228881836,
        "wires": [
            [
                "6cf69556.241cfc"
            ]
        ]
    },
    {
        "id": "6cf69556.241cfc",
        "type": "function",
        "z": "a93125f3.877cf",
        "name": "cookie",
        "func": "var cookies = msg.responseCookies;\n\ntry{\n    cookies[\"connect.sid\"];\n}catch(error){\n    node.error(\"Invalid username or password\", msg);\n    return;\n}\n\nmsg.headers = {\n \"content-type\":\"application/json\",\n \"Cookie\": \"connect.sid=\" + cookies[\"connect.sid\"][\"value\"]\n};\n\nflow.set(\"cookie\",msg.headers[\"Cookie\"]);\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 494.88902282714844,
        "y": 234.25194549560547,
        "wires": [
            [
                "ed60b64c.9d544",
                "4cb2160a.608648"
            ]
        ]
    },
    {
        "id": "d06a44fd.dc19a8",
        "type": "function",
        "z": "a93125f3.877cf",
        "name": "header",
        "func": "try{\n    test = global.get(\"username\")[0];\n}catch(error){\n    node.error(\"Login error - login at http://localhost:1880/ui/#/0\", msg);\n    return;\n}\ntry{\n    test = global.get(\"password\")[0];\n}catch(error){\n    node.error(\"Login error - login at http://localhost:1880/ui/#/0\", msg);\n    return;\n}\n\n\nmsg.payload = {\n \"username\": global.get(\"username\"), \n \"password\": global.get(\"password\")\n};\n\nmsg.topic = \"https://api1.www.3drepo.io/api/login\";\n\nmsg.headers = {'content-type':'application/json'};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 494.29359436035156,
        "y": 133.63790893554688,
        "wires": [
            [
                "1721210d.d1f817"
            ]
        ]
    },
    {
        "id": "96c8fd2.2708c8",
        "type": "comment",
        "z": "a93125f3.877cf",
        "name": "login",
        "info": "",
        "x": 496.20494079589844,
        "y": 86.71185302734375,
        "wires": []
    },
    {
        "id": "b2c78aaf.29ad98",
        "type": "http request",
        "z": "a93125f3.877cf",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "url": "{{{topic}}}",
        "tls": "",
        "x": 1381.083251953125,
        "y": 290,
        "wires": [
            [
                "ca18a79b.621868"
            ]
        ]
    },
    {
        "id": "8fa3d14a.53b96",
        "type": "function",
        "z": "a93125f3.877cf",
        "name": "group API call",
        "func": "var cookie = flow.get(\"cookie\");\n\nmsg.headers = {\n \"content-type\":\"application/json\",\n \"Cookie\": cookie\n};\n\nmsg.topic = \"https://api1.www.3drepo.io/api/\" + flow.get(\"teamspace\") + \"/\" + flow.get(\"modelID\") + \"/groups\";\n\nvar group = {};\ngroup.name = msg.inputs.groupName ;\ngroup.description = msg.inputs.desc;\ngroup.author = global.get(\"username\"); \ngroup.createdAt = Date.now();\ngroup.color = msg.inputs.colour;\ngroup.objects = msg.payload;\n\nmsg.total = group.objects[0].shared_ids.length;\nmsg.payload = group;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1379.785888671875,
        "y": 235.19122314453125,
        "wires": [
            [
                "b2c78aaf.29ad98"
            ]
        ]
    },
    {
        "id": "435afafd.32241c",
        "type": "function",
        "z": "a93125f3.877cf",
        "name": "shared IDs",
        "func": "function getKeyByValue(object, value) {\n    return Object.keys(object).find(key => object[key] === value);\n}\n\nvar sharedIDs = [];\nIDmap = flow.get(\"IDmap\");\ntry{\n    var test = IDmap.length;\n}catch(error){\n    node.error(\"Missing ID map\", msg);\n    return;\n}\n\nif (IDmap !== undefined) {\n    if (IDmap.subModels !== undefined) {        // if federation\n        for (var i = 0; i < msg.payload.length; i++) {\n            for (var j = 0; j < IDmap.subModels.length; j++) {\n                var key = getKeyByValue(IDmap.subModels[j].idMap, msg.payload[i]);\n                if (key !== undefined) {\n                    sharedIDs.push(msg.payload[i]);\n                    break;\n                }\n            }\n        }\n    } else {\n        for (var i = 0; i < msg.payload.length; i++) {\n            var key = getKeyByValue(IDmap.idMap, msg.payload[i]);\n            sharedIDs.push(msg.payload[i]);\n        }\n    }\n}\n\nmsg.payload = [{\n    \"account\": flow.get(\"teamspace\"),\n    \"model\": flow.get(\"modelID\"),\n    \"shared_ids\": sharedIDs,\n}];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1385.8849487304688,
        "y": 176.24462890625,
        "wires": [
            [
                "8fa3d14a.53b96"
            ]
        ]
    },
    {
        "id": "76acca7.720ceb4",
        "type": "comment",
        "z": "a93125f3.877cf",
        "name": "create group",
        "info": "",
        "x": 1382.5933532714844,
        "y": 75.45305633544922,
        "wires": []
    },
    {
        "id": "475a6118.bc9ca",
        "type": "function",
        "z": "a93125f3.877cf",
        "name": "INPUTS",
        "func": "// INPUTS\n\ngroupName =  (msg.topic) ? msg.topic : \"Group\";\ndescription = msg.payload.length + \" from Node-RED\";\ncolour = [parseInt(Math.random()*255),parseInt(Math.random()*255),parseInt(Math.random()*255)];\n\n\n// ignore the rest\n\nmsg.inputs = {};\nmsg.inputs.groupName = groupName;\nmsg.inputs.desc = description;\nmsg.inputs.colour = colour;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1380.6070251464844,
        "y": 129.85570526123047,
        "wires": [
            [
                "435afafd.32241c"
            ]
        ]
    },
    {
        "id": "ed60b64c.9d544",
        "type": "function",
        "z": "a93125f3.877cf",
        "name": "revisions API",
        "func": "cookie = flow.get(\"cookie\");\n\nmsg.headers = {\n \"content-type\":\"application/json\",\n \"Cookie\": cookie\n};\n\nmsg.payload = \"https://api1.www.3drepo.io/api/\" + flow.get(\"teamspace\") + \"/\" + flow.get(\"modelID\") + \"/\" + \"revisions.json\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 492.33335876464844,
        "y": 428.7500228881836,
        "wires": [
            [
                "3ae3d413.f217ec"
            ]
        ]
    },
    {
        "id": "3ae3d413.f217ec",
        "type": "http request",
        "z": "a93125f3.877cf",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "url": "{{{payload}}}",
        "tls": "",
        "x": 492.3229522705078,
        "y": 478.229172706604,
        "wires": [
            [
                "a5dda955.4d02c"
            ]
        ]
    },
    {
        "id": "a5dda955.4d02c",
        "type": "function",
        "z": "a93125f3.877cf",
        "name": "OUTPUTS",
        "func": "// all revisions\n\nflow.set(\"revisions\", msg.payload);\n\nreturn {payload:\"\"};\n\n\n// uncomment and specify subset of revisions below\n\n// flow.set(\"revisions\", msg.payload.slice(0,10));\n",
        "outputs": 1,
        "noerr": 0,
        "x": 503.32989501953125,
        "y": 526.9722566604614,
        "wires": [
            [
                "242245c0.39d2ca"
            ]
        ]
    },
    {
        "id": "9252e01e.c60d18",
        "type": "comment",
        "z": "a93125f3.877cf",
        "name": "revisions",
        "info": "get all revisions of a model\n\nto choose only subset of revisions use:\nmsg.payload.slice(0,3)\n\nplace after login",
        "x": 494.58335876464844,
        "y": 382.22571563720703,
        "wires": []
    },
    {
        "id": "242245c0.39d2ca",
        "type": "function",
        "z": "a93125f3.877cf",
        "name": "ID map call",
        "func": "cookie = flow.get(\"cookie\");\n\ntry{\n    revID = flow.get(\"revisions\")[0]._id;\n}catch(error){\n    node.error(\"Missing revisions\", msg);\n    return;\n}\n\nmsg.headers = {\n \"content-type\":\"application/json\",\n \"Cookie\": cookie\n};\n\nmsg.payload = \"https://api1.www.3drepo.io/api/\" + flow.get(\"teamspace\") + \"/\" + flow.get(\"modelID\") + \"/revision/\" + revID + \"/idmap.json\";\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 501.08335876464844,
        "y": 666.2500534057617,
        "wires": [
            [
                "41378416.619b5c"
            ]
        ]
    },
    {
        "id": "41378416.619b5c",
        "type": "http request",
        "z": "a93125f3.877cf",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "url": "{{{payload}}}",
        "tls": "",
        "x": 501.3567752838135,
        "y": 719.7812309265137,
        "wires": [
            [
                "f33b4f4b.9d6788"
            ]
        ]
    },
    {
        "id": "3da74ee7.fe4ac2",
        "type": "comment",
        "z": "a93125f3.877cf",
        "name": "ID map",
        "info": "",
        "x": 497.9898929595947,
        "y": 620.4034538269043,
        "wires": []
    },
    {
        "id": "f33b4f4b.9d6788",
        "type": "function",
        "z": "a93125f3.877cf",
        "name": "set ID map",
        "func": "flow.set(\"IDmap\", msg.payload);",
        "outputs": 1,
        "noerr": 0,
        "x": 496.7398929595947,
        "y": 774.0699882507324,
        "wires": [
            []
        ]
    },
    {
        "id": "68f0449b.ce21c4",
        "type": "comment",
        "z": "a93125f3.877cf",
        "name": "how to",
        "info": "log in at http://localhost:1880/ui/#/0 or http://yourVPS:1880/ui/#/0\nset your teamspace and model ID of Lego_House_Federation in MAIN INPUTS\nset path to validate.csv in read csv, make sure spreadsheet cells are formatted as text\ndeploy\nchange options for broad/narrow validation or value check in data validation INPUTS\nopen Lego_House_Federation in 3D Repo, see the results in Issues card",
        "x": 170.9375,
        "y": 106.95834350585938,
        "wires": []
    },
    {
        "id": "1dae7ce0.e780a3",
        "type": "ui_text_input",
        "z": "a93125f3.877cf",
        "name": "",
        "label": "Username",
        "group": "1f040b86.67f8fc",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "text",
        "delay": "20",
        "topic": "",
        "x": 181.0833740234375,
        "y": 547.5000610351562,
        "wires": [
            [
                "b66eae7b.daaa98"
            ]
        ]
    },
    {
        "id": "4219eb7b.087c4c",
        "type": "ui_text_input",
        "z": "a93125f3.877cf",
        "name": "",
        "label": "Password",
        "group": "1f040b86.67f8fc",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "password",
        "delay": "20",
        "topic": "",
        "x": 180.11105346679688,
        "y": 633.8933334350586,
        "wires": [
            [
                "35cb11e6.509da6"
            ]
        ]
    },
    {
        "id": "b66eae7b.daaa98",
        "type": "function",
        "z": "a93125f3.877cf",
        "name": "username",
        "func": "global.set(\"username\",msg.payload);",
        "outputs": 1,
        "noerr": 0,
        "x": 184.83334350585938,
        "y": 591.5321807861328,
        "wires": [
            []
        ]
    },
    {
        "id": "35cb11e6.509da6",
        "type": "function",
        "z": "a93125f3.877cf",
        "name": "password",
        "func": "global.set(\"password\",msg.payload);\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 178.1710205078125,
        "y": 675.5513229370117,
        "wires": [
            []
        ]
    },
    {
        "id": "bf077fae.ff2a3",
        "type": "comment",
        "z": "a93125f3.877cf",
        "name": "login details",
        "info": "input your login details in dashboard at\n\nhttp://localhost:1880/ui/#/0\n\nset as global variable hence use only once for multiple flows",
        "x": 176.75003051757812,
        "y": 497.1296691894531,
        "wires": []
    },
    {
        "id": "9436cad9.506c7",
        "type": "function",
        "z": "a93125f3.877cf",
        "name": "all meta IDs",
        "func": "teamspace = flow.get(\"teamspace\");\n\nallMeta = [];\n\nif (msg.payload.subModels !== undefined) {\n    for (var i = 0; i < msg.payload.subModels.length; i++) {\n        for (var j = 0; j < msg.payload.subModels[i].data.length; j++) {\n            allMeta.push(msg.payload.subModels[i].data[j]._id)\n        }\n    }\n}else{\n    for(var i in msg.payload.data){\n        allMeta.push(msg.payload.data[i]._id)\n    }\n}\n\nvar allMeta = new Set([].concat(...allMeta));\nallMeta = Array.from(allMeta);\n\nflow.set(\"allMeta\", allMeta);\n\nreturn {payload:allMeta};",
        "outputs": 1,
        "noerr": 0,
        "x": 769.85400390625,
        "y": 232.35406494140625,
        "wires": [
            []
        ]
    },
    {
        "id": "ef5e7f9c.4ba12",
        "type": "http request",
        "z": "a93125f3.877cf",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "url": "{{{payload}}}",
        "tls": "",
        "x": 772.711181640625,
        "y": 182.5128173828125,
        "wires": [
            [
                "9436cad9.506c7",
                "8387b9e7.e5bd8"
            ]
        ]
    },
    {
        "id": "4cb2160a.608648",
        "type": "function",
        "z": "a93125f3.877cf",
        "name": "all meta call",
        "func": "cookie = flow.get(\"cookie\");\n\ntry{\n    revID = flow.get(\"revisions\")[0]._id;\n}catch(error){\n    node.error(\"Missing revisions\", msg);\n    return;\n}\n\nmsg.headers = {\n    \"content-type\":\"application/json\",\n    \"Cookie\": cookie\n};\n\nmsg.payload = \"https://api1.www.3drepo.io/api/\" + flow.get(\"teamspace\") + \"/\" + flow.get(\"modelID\") + \"/revision/\" + revID + \"/meta/all.json\";\n\nreturn msg;",
        "outputs": "1",
        "noerr": 0,
        "x": 774.7747802734375,
        "y": 132.25885009765625,
        "wires": [
            [
                "ef5e7f9c.4ba12"
            ]
        ]
    },
    {
        "id": "25767457.e080dc",
        "type": "comment",
        "z": "a93125f3.877cf",
        "name": "all meta",
        "info": "retrieve all metadata in model or federation",
        "x": 777.5525512695312,
        "y": 82.3541259765625,
        "wires": []
    },
    {
        "id": "e7b607d7.77aaa8",
        "type": "http response",
        "z": "a93125f3.877cf",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1672.35400390625,
        "y": 276.1041259765625,
        "wires": []
    },
    {
        "id": "f5f01f2b.0cdbb",
        "type": "function",
        "z": "a93125f3.877cf",
        "name": "create issue API call",
        "func": "var issue = {};\nvar viewpoint = {};\n\nissue.name = msg.inputs.issueName;\nissue.desc =  msg.inputs.desc;\nissue.account = flow.get(\"username\");\nissue.assigned_roles = [];\nissue.creator_role = \"Client\";\nissue.model = flow.get(\"modelID\");\nissue.objectId = null;\nissue.pickedNorm = null;\nissue.pickedPos = null;\nissue.priority = \"none\";\nissue.rev_id = null;\nissue.scale = 1;\nissue.status = \"open\";\nissue.topic_type = \"for_information\";\n\nviewpoint.screenshot = \"\";\n\nissue.viewpoint = viewpoint;\nissue.viewpoint.highlighted_group_id = msg.payload._id;\n// issue.viewpoint.hidden_group_id = msg.payload._id;\n// issue.viewpoint.shown_group_id = msg.payload._id;\n\nvar cookie = flow.get(\"cookie\");\n\nmsg.headers = {\n \"content-type\":\"application/json\",\n \"Cookie\": cookie\n};\n\nmsg.topic = \"https://api1.www.3drepo.io/api/\" + flow.get(\"teamspace\") + \"/\" + flow.get(\"modelID\") + \"/issues.json\";\n\nmsg.payload = issue;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1661.3286743164062,
        "y": 177.52197265625,
        "wires": [
            [
                "f7a7de39.bc037"
            ]
        ]
    },
    {
        "id": "f7a7de39.bc037",
        "type": "http request",
        "z": "a93125f3.877cf",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "url": "{{{topic}}}",
        "tls": "",
        "x": 1668.7453002929688,
        "y": 225.44183349609375,
        "wires": [
            [
                "e7b607d7.77aaa8"
            ]
        ]
    },
    {
        "id": "9f6c166d.a70708",
        "type": "comment",
        "z": "a93125f3.877cf",
        "name": "create issue",
        "info": "",
        "x": 1662.9674682617188,
        "y": 84.67718505859375,
        "wires": []
    },
    {
        "id": "ca18a79b.621868",
        "type": "function",
        "z": "a93125f3.877cf",
        "name": "INPUTS",
        "func": "// INPUTS\n\nissueName = \"Data validation\";\ndescription = msg.total + \" objects don't meet validation criteria\";\n\n\n// ignore the rest\n\nmsg.inputs = {};\nmsg.inputs.issueName = issueName;\nmsg.inputs.desc = description;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1659.3401489257812,
        "y": 132.11798095703125,
        "wires": [
            [
                "f5f01f2b.0cdbb"
            ]
        ]
    },
    {
        "id": "633f16e0.b034c",
        "type": "file in",
        "z": "a93125f3.877cf",
        "name": "validate.csv",
        "filename": "C:\\...\\validate.csv",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "x": 489.854248046875,
        "y": 911.104248046875,
        "wires": [
            [
                "47d8f48d.952324"
            ]
        ]
    },
    {
        "id": "47d8f48d.952324",
        "type": "csv",
        "z": "a93125f3.877cf",
        "name": "",
        "sep": ",",
        "hdrin": "",
        "hdrout": "",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": 0,
        "x": 493.1876525878906,
        "y": 961.1045532226562,
        "wires": [
            [
                "70de0277.ee0dfc"
            ]
        ]
    },
    {
        "id": "70de0277.ee0dfc",
        "type": "function",
        "z": "a93125f3.877cf",
        "name": "set validate",
        "func": "flow.set(\"validate\", msg.payload);\n",
        "outputs": 1,
        "noerr": 0,
        "x": 498.7432556152344,
        "y": 1008.8823852539062,
        "wires": [
            []
        ]
    },
    {
        "id": "ee19d730.03dd2",
        "type": "comment",
        "z": "a93125f3.877cf",
        "name": "read csv",
        "info": "",
        "x": 498.1505126953125,
        "y": 860.0304565429688,
        "wires": []
    },
    {
        "id": "3e0ff58d.80c692",
        "type": "comment",
        "z": "a93125f3.877cf",
        "name": "data validation",
        "info": "Inputs:\n- validate.csv with required fields and values\n- list of IFC types to exclude",
        "x": 1067.3540649414062,
        "y": 77.35415649414062,
        "wires": []
    },
    {
        "id": "367a1716.9e7fd8",
        "type": "function",
        "z": "a93125f3.877cf",
        "name": "if fed (meta)",
        "func": "var o = [];\n\nif(Array.isArray(msg.payload)){\n    for (var i=0; i < msg.payload.length; i++) {\n        if (msg.payload[i] !== undefined) {\n            if (msg.payload[i].subModels !== undefined) {\n                var obj = {};\n                obj.data = [];\n                for (var j = 0; j < msg.payload[i].subModels.length; j++) {\n                    for (var k = 0; k < msg.payload[i].subModels[j].data.length; k++) {\n                        // merge data arrays as per API calls \n                        obj.data.push(msg.payload[i].subModels[j].data[k])\n                    }\n                }\n                // obj.data = temp;\n                o.push(obj);\n            } else {\n                return msg;\n            }\n        }\n    }\n}else{\n    if (msg.payload !== undefined) {\n        if (msg.payload.subModels !== undefined) {\n            var obj = {};\n            obj.data = [];\n            for (var j = 0; j < msg.payload.subModels.length; j++) {\n                for (var k = 0; k < msg.payload.subModels[j].data.length; k++) {\n                    // merge data arrays as per API calls \n                    obj.data.push(msg.payload.subModels[j].data[k])\n                }\n            }\n        } else {\n            return msg;\n        }\n    }\n    msg.payload = obj;\n    return msg\n}\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1068.465087890625,
        "y": 190.54873657226562,
        "wires": [
            [
                "c5af49a7.39fd78"
            ]
        ]
    },
    {
        "id": "c5af49a7.39fd78",
        "type": "function",
        "z": "a93125f3.877cf",
        "name": "validation",
        "func": "validate = flow.get(\"validate\");\n\ntry{\n    test = validate.length;\n}catch(error){\n    node.error(\"Missing validatation data\", msg);\n    return;\n}\n\nfunction validation(object, validate){\n    var hasField = true;\n    var isCorrect = true;\n    for(var j=0; j<validate.length; j++){       // loop through validation spreadsheet\n        param = String(validate[j].col1).replace(/[^\\x00-\\x7F]/g, \"\");      // ASCI characters only, in case something dodgy comes from the spreadsheet\n        if(Object.keys(object.metadata).indexOf(param) === -1){    // check field\n            hasField = false;\n        }else{\n            if(msg.inputs.checkValue){\n                value = String(validate[j].col2).replace(/[^\\x00-\\x7F]/g, \"\");      // ASCI characters only, in case something dodgy comes from the spreadsheet\n                if(String(object.metadata[param]) != value){      // check value\n                    isCorrect = false;\n                }\n            }\n        }\n    }\n    return [hasField, isCorrect];\n}\n\nvalid = [];\ninvalid = [];\n\nfor(var i=0; i<msg.payload.data.length; i++){   // loop through all meta objects\n    if(msg.inputs.isBroad){\n        if(msg.inputs.exclude.indexOf(msg.payload.data[i].metadata[\"IFC Type\"]) === -1){   // exclude types\n            var check = validation(msg.payload.data[i],validate);\n            if(check[0] && check[1]){  \n                for(var k=0; k<msg.payload.data[i].parents.length; k++){\n                    valid.push(msg.payload.data[i].parents[k]); \n                }\n            }else{\n                for(var k=0; k<msg.payload.data[i].parents.length; k++){\n                    invalid.push(msg.payload.data[i].parents[k]);\n                }\n            }\n        }\n    }else{\n        if(msg.inputs.include.indexOf(msg.payload.data[i].metadata[\"IFC Type\"]) != -1){   // include only types\n            var check = validation(msg.payload.data[i],validate);\n            if(check[0] && check[1]){  \n                for(var k=0; k<msg.payload.data[i].parents.length; k++){\n                    valid.push(msg.payload.data[i].parents[k]); \n                }\n            }else{\n                for(var k=0; k<msg.payload.data[i].parents.length; k++){\n                    invalid.push(msg.payload.data[i].parents[k]);\n                }\n            }\n        }\n    }\n}\n\nreturn [{payload:valid},{payload:invalid}];\n",
        "outputs": "2",
        "noerr": 0,
        "x": 1071.7892456054688,
        "y": 249.67837524414062,
        "wires": [
            [],
            [
                "f10087f0.5a8cb8"
            ]
        ],
        "outputLabels": [
            "valid",
            "invalid"
        ]
    },
    {
        "id": "8387b9e7.e5bd8",
        "type": "function",
        "z": "a93125f3.877cf",
        "name": "INPUTS",
        "func": "// INPUTS\n\n// validation criteria (fields and values) set in external validation spreadsheet - load with Read CSV node\nisBroad = false;    // false for borad, true for narrow data validation only\ncheckValue = true;      // false for checking that a field exists in object's metadata\n\nexclude = [\"IfcBuilding\",\"IfcBuildingStorey\", \"IfcSite\"];  // types to exlude from broad data validation\ninclude = [\"IfcBuildingElementProxy\"];  // types only to include in narrow data validation, exclude types are ignored in narrow validation\n\n\n// ignore the rest\n\nmsg.inputs = {};\nmsg.inputs.isBroad = isBroad;\nmsg.inputs.exclude = exclude;\nmsg.inputs.include = include;\nmsg.inputs.checkValue = checkValue;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1075.0205688476562,
        "y": 131.70138549804688,
        "wires": [
            [
                "367a1716.9e7fd8"
            ]
        ]
    },
    {
        "id": "f10087f0.5a8cb8",
        "type": "function",
        "z": "a93125f3.877cf",
        "name": "CREATE ISSUE?",
        "func": "// INPUTS\n\ncreateIssue = true;\n\n\n// ignore the rest\n\nif(createIssue){\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1072.3956298828125,
        "y": 307.9515075683594,
        "wires": [
            [
                "475a6118.bc9ca"
            ]
        ]
    },
    {
        "id": "1f040b86.67f8fc",
        "type": "ui_group",
        "z": "",
        "name": "Log In",
        "tab": "a19cd6ac.5954a",
        "order": 1,
        "disp": true,
        "width": "6"
    },
    {
        "id": "a19cd6ac.5954a",
        "type": "ui_tab",
        "z": "",
        "name": "Log In",
        "icon": "dashboard",
        "order": 1
    }
]