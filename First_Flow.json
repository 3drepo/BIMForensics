[{"id":"ed50f85a.d5c218","type":"tab","label":"First_Flow","disabled":false,"info":""},{"id":"bf34e098.13465","type":"http request","z":"ed50f85a.d5c218","name":"","method":"POST","ret":"obj","url":"https://dev.3drepo.io/api/login","tls":"","x":447.9599151611328,"y":77.3985652923584,"wires":[["6ad539d.d9e3ec8"]]},{"id":"dbab99ce.8e4338","type":"inject","z":"ed50f85a.d5c218","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":true,"x":125.00000762939453,"y":78.92422103881836,"wires":[["50873358.ac06cc","34510a8a.975d06"]]},{"id":"6ad539d.d9e3ec8","type":"function","z":"ed50f85a.d5c218","name":"cookie","func":"var cookies = msg.responseCookies;\n\nmsg.headers = {\n    \"content-type\":\"application/json\",\n    \"Cookie\": \"connect.sid=\" + cookies[\"connect.sid\"][\"value\"]\n};\n\nflow.set(\"cookie\",msg.headers[\"Cookie\"]);\n\nreturn msg;\n\n","outputs":1,"noerr":0,"x":605.2377891540527,"y":78.17832279205322,"wires":[["ab4f5041.5bc1d"]]},{"id":"139959c7.f54f26","type":"debug","z":"ed50f85a.d5c218","name":"A","active":true,"console":"false","complete":"payload","x":1094.4789810180664,"y":214.25780773162842,"wires":[]},{"id":"436d0a75.386f04","type":"debug","z":"ed50f85a.d5c218","name":"B","active":true,"console":"false","complete":"payload","x":1090.0407791137695,"y":270.3690023422241,"wires":[]},{"id":"50873358.ac06cc","type":"function","z":"ed50f85a.d5c218","name":"log in","func":"msg.payload = {\n    \"username\": flow.get(\"username\"),\n    \"password\": flow.get(\"password\")\n};\n\nmsg.headers = {\n    'content-type':'application/json'\n};\n\nreturn msg;","outputs":1,"noerr":0,"x":292.83679580688477,"y":78.67534446716309,"wires":[["bf34e098.13465"]]},{"id":"ab4f5041.5bc1d","type":"function","z":"ed50f85a.d5c218","name":"API call","func":"filter = flow.get(\"filter\")\ncookie = flow.get(\"cookie\");\nvar calls = [];\n\nmsg.headers = {\n    \"content-type\":\"application/json\",\n    \"Cookie\": cookie\n};\n\nfor(var prop in filter){\n    calls.push(\"https://dev.3drepo.io/api/\" + flow.get(\"teamspace\") + \"/\" + flow.get(\"modelID\") + \"/revision/\" + flow.get(\"revision\") + \"/meta/findObjsWith/\" + prop + \".json\");\n}\n\nmsg.payload = calls;\n\nreturn msg;","outputs":"1","noerr":0,"x":748.8786506652832,"y":78.4543228149414,"wires":[["d6c12900.c216b8"]]},{"id":"d6c12900.c216b8","type":"split","z":"ed50f85a.d5c218","name":"","splt":"\\n","spltType":"str","arraySplt":1,"arraySpltType":"len","stream":false,"addname":"","x":886.2880325317383,"y":78.33140182495117,"wires":[["a2b53cf0.c456f"]]},{"id":"a2b53cf0.c456f","type":"http request","z":"ed50f85a.d5c218","name":"","method":"GET","ret":"obj","url":"{{{payload}}}","tls":"","x":1038.8402404785156,"y":78.07464790344238,"wires":[["2afcc6bb.23c00a"]]},{"id":"2afcc6bb.23c00a","type":"join","z":"ed50f85a.d5c218","name":"","mode":"auto","build":"string","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","accumulate":"false","timeout":"","count":"","x":1183.6579303741455,"y":78.67979049682617,"wires":[["49c6e857.86de98"]]},{"id":"f76d0c5c.1ad0a","type":"function","z":"ed50f85a.d5c218","name":"meta","func":"var meta = {};\n\nfor(var i=0; i<msg.payload.length; i++){\n    meta[i] = [];\n    for(var j=0; j<msg.payload[i].data.length; j++){\n        var obj = msg.payload[i].data[j];\n        meta[i].push(obj.metadata.value);\n    }\n    var set = new Set(meta[i]);\n    meta[i] = Array.from(set);\n}\n\nflow.set(\"meta\",meta);\nmsg.payload = meta;\n\nreturn msg;","outputs":1,"noerr":0,"x":691.1405811309814,"y":284.06939601898193,"wires":[["436d0a75.386f04"]]},{"id":"362e070f.895ae8","type":"function","z":"ed50f85a.d5c218","name":"count by meta","func":"var meta = flow.get(\"meta\");\nvar counter = {};\n\nfor(var i=0; i<msg.payload.length; i++){\n    counter[i] = {};\n    for(var j=0; j<meta[i].length; j++){\n        counter[i][meta[i][j]] = {};\n        counter[i][meta[i][j]] = 0;\n    }\n\n    for(var j=0; j<msg.payload[i].data.length; j++){\n        var obj = msg.payload[i].data[j];\n        for(var k=0; k<meta[i].length; k++){\n            if(obj.metadata.value == meta[i][k]){\n                counter[i][meta[i][k]] += 1;\n            }\n        }\n    }\n}\n\nmsg.payload = counter; \n\nflow.set(\"stats\",counter);\n\nreturn msg;","outputs":1,"noerr":0,"x":723.362756729126,"y":330.73611068725586,"wires":[["436d0a75.386f04","1faf9bfe.5f7034"]]},{"id":"395c01f3.7cda3e","type":"function","z":"ed50f85a.d5c218","name":"filters","func":"filter = flow.get(\"filter\");\n\nvar parentIDs = [];\nvar i = -1;\n\nfor(var prop in filter){\n    i += 1;\n    parentIDs[i] = [];\n    for(var j=0; j<filter[prop].length; j++){\n        if(msg.payload[i] != undefined){\n            for(var k=0; k<msg.payload[i].data.length; k++){\n                var obj = msg.payload[i].data[k];\n                if(obj != undefined){\n                    if(filter[prop][0] == true && obj.metadata.value.search(filter[prop][j]) > -1){\n                        for(var l=0; l<obj.parents.length; l++){\n                                parentIDs[i].push(obj.parents[l]);\n                            }\n                    }else{\n                        if(obj.metadata.value == filter[prop][j]){\n                            for(var l=0; l<obj.parents.length; l++){\n                                parentIDs[i].push(obj.parents[l]);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nmsg.payload = parentIDs;\n\nreturn msg;","outputs":1,"noerr":0,"x":693.4246578216553,"y":235.43517303466797,"wires":[["e5afae2e.5ad2f","139959c7.f54f26"]]},{"id":"49c6e857.86de98","type":"function","z":"ed50f85a.d5c218","name":"---","func":"\nreturn msg;","outputs":1,"noerr":0,"x":550.7204322814941,"y":274.9904294013977,"wires":[["395c01f3.7cda3e","f76d0c5c.1ad0a","362e070f.895ae8","8ece7486.98dc58"]]},{"id":"e5afae2e.5ad2f","type":"function","z":"ed50f85a.d5c218","name":"filters intersection","func":"var result = msg.payload.shift().filter(function(v) {\n    return msg.payload.every(function(a) {\n        return a.indexOf(v) !== -1;\n    });\n});\n\nmsg.payload = result;\n\nflow.set(\"filtered\", result);\n\nreturn msg;","outputs":1,"noerr":0,"x":886.0652236938477,"y":196.70258712768555,"wires":[["139959c7.f54f26"]]},{"id":"634c908f.3991a","type":"http response","z":"ed50f85a.d5c218","name":"create issue","statusCode":"","headers":{},"x":1204.9945487976074,"y":623.164400100708,"wires":[]},{"id":"753769f3.a3ad28","type":"http request","z":"ed50f85a.d5c218","name":"","method":"POST","ret":"obj","url":"{{{topic}}}","tls":"","x":602.5535736083984,"y":627.6971807479858,"wires":[["b2f35c4d.64a1a"]]},{"id":"e93b9039.8475a","type":"function","z":"ed50f85a.d5c218","name":"group API call","func":"var cookie = flow.get(\"cookie\");\n\nmsg.headers = {\n    \"content-type\":\"application/json\",\n    \"Cookie\": cookie\n};\n\nmsg.topic = \"https://dev.3drepo.io/api/\" + flow.get(\"teamspace\") + \"/\" + flow.get(\"modelID\") + \"/groups\";\n\nvar group = {};\ngroup.name = \"filtered\";\ngroup.color = [255,0,0];\ngroup.objects = msg.payload;\n\nmsg.payload = group;\n\nreturn msg;","outputs":1,"noerr":0,"x":1137.0894927978516,"y":463.55503845214844,"wires":[["753769f3.a3ad28"]]},{"id":"34510a8a.975d06","type":"function","z":"ed50f85a.d5c218","name":"INPUTS","func":"// *** required fields:\nusername = \"***\";         // delete your credentials if you want to share your flow!\npassword = \"***\";            // delete your credentials if you want to share your flow!\nteamspace = username;\nmodelID = \"***\";   // copy from URL (Sample_House)\nrevision = \"master/head\";\n\nissueName = \"Green plates\";     // name appears in issue tracker\ncreateIssue = true;\n\nfilter = {\n    \"IFC%20Type\":[false, \"IfcBuildingElementProxy\"],    // use %20 for empty space\n    \"RGB\":[false, \"#00451A\"],\n    \"Category\":[false, \"SYSTEM: PLATES\"],\n    // \"Floor\":[false, \"GF Ground value\",\"RF Roof\"],\n    // \"BrickName\":[true, \"1X3\",\"2X3\"],\n    // \"ColourType\":[\"Transparent\"]\n}\n\n// ignore the rest\nflow.set(\"username\", username);\nflow.set(\"password\", password);\nflow.set(\"teamspace\", teamspace);\nflow.set(\"modelID\", modelID);\nflow.set(\"revision\", revision);\nflow.set(\"filter\",filter);\nflow.set(\"issueName\", issueName);\nflow.set(\"createIssue\", createIssue);\n\nreturn msg;","outputs":1,"noerr":0,"x":131.81558227539062,"y":293.5671854019165,"wires":[[]]},{"id":"8ece7486.98dc58","type":"function","z":"ed50f85a.d5c218","name":"ID map call","func":"cookie = flow.get(\"cookie\");\n\nmsg.headers = {\n    \"content-type\":\"application/json\",\n    \"Cookie\": cookie\n};\n\nmsg.payload = \"https://dev.3drepo.io/api/\" + flow.get(\"teamspace\") + \"/\" + flow.get(\"modelID\") + \"/revision/\" + flow.get(\"revision\") + \"/idmap.json\";\n\nreturn msg;","outputs":1,"noerr":0,"x":591.0305862426758,"y":462.7446880340576,"wires":[["d7a0eafd.8ef5e8"]]},{"id":"d7a0eafd.8ef5e8","type":"http request","z":"ed50f85a.d5c218","name":"","method":"GET","ret":"obj","url":"{{{payload}}}","tls":"","x":773.5262069702148,"y":466.1648473739624,"wires":[["667175b0.c7d85c"]]},{"id":"667175b0.c7d85c","type":"function","z":"ed50f85a.d5c218","name":"shared IDs","func":"function getKeyByValue(object, value) {\n  return Object.keys(object).find(key => object[key] === value);\n}\n\nvar objects = [];\n\nfiltered = flow.get(\"filtered\");\n\nfor(var i=0; i<filtered.length; i++){\n    var key = getKeyByValue(msg.payload.idMap, filtered[i]);\n    var o = {};\n    o.account = flow.get(\"username\");\n    o.id = key;\n    o.model = flow.get(\"modelID\");\n    o.shared_id = filtered[i];\n    objects.push(o);\n}\n\nmsg.payload = objects;\n\nreturn msg;","outputs":1,"noerr":0,"x":948.3498878479004,"y":466.0382843017578,"wires":[["e93b9039.8475a"]]},{"id":"b2f35c4d.64a1a","type":"function","z":"ed50f85a.d5c218","name":"create issue API call","func":"createIssue = flow.get(\"createIssue\");\n\nif(createIssue === true){\n    var issue = {};\n    var viewpoint = {};\n    filter = flow.get(\"filter\");\n    stats = flow.get(\"stats\");\n    var f = [];\n    for(var prop in filter){\n        f.push(filter[prop].slice(1));    \n    }\n    issue.name = flow.get(\"issueName\");\n    issue.desc = flow.get(\"filtered\").length + \" results for: \" + f;\n    issue.account = flow.get(\"username\");\n    issue.assigned_roles = [];\n    issue.creator_role = \"Client\";\n    issue.group_id = msg.payload._id;\n    issue.model = flow.get(\"modelID\");\n    issue.objectId = null;\n    issue.pickedNorm = null;\n    issue.pickedPos = null;\n    issue.priority = \"none\";\n    issue.rev_id = null;\n    issue.scale = 1;\n    issue.status = \"open\";\n    issue.topic_type = \"for_information\";\n    \n    issue.comments = flow.get(\"comments\");\n    \n    // viewpoint.aspect_ratio =  1.1499189138412476;\n    // viewpoint.clippingPlanes = [];\n    // viewpoint.far = 37788.875;\n    // viewpoint.fov = 1.0471975803375244;\n    // viewpoint.look_at = [9599.10546875,76.478515625,-6112.9375];\n    // viewpoint.near = 75.57775115966797;\n    // viewpoint.position = [26698.98046875,18214.173828125,-25682.21875];\n    // viewpoint.right = [-0.7530198097229004,0,-0.6579978466033936];\n    viewpoint.screenshot = \"\";\n    // viewpoint.up = [-0.37658801674842834,0.8200274705886841,0.4309714138507843];\n    // viewpoint.view_dir = [-0.5395762920379639,-0.5723240971565247,0.6174969673156738];\n    \n    issue.viewpoint = viewpoint;\n    \n    var cookie = flow.get(\"cookie\");\n    \n    msg.headers = {\n        \"content-type\":\"application/json\",\n        \"Cookie\": cookie\n    };\n    \n    msg.topic = \"https://dev.3drepo.io/api/\" + flow.get(\"teamspace\") + \"/\" + flow.get(\"modelID\") + \"/issues.json\";\n    \n    msg.payload = issue;\n    \n    return msg;\n}","outputs":1,"noerr":0,"x":800.9136734008789,"y":625.804482460022,"wires":[["9d6dd695.f1bd18"]]},{"id":"9d6dd695.f1bd18","type":"http request","z":"ed50f85a.d5c218","name":"","method":"POST","ret":"obj","url":"{{{topic}}}","tls":"","x":1018.0522308349609,"y":623.1687707901001,"wires":[["634c908f.3991a"]]},{"id":"be6af1e3.3cbde","type":"ui_chart","z":"ed50f85a.d5c218","name":"","group":"9c3ad063.5d398","order":0,"width":0,"height":0,"label":"chart","chartType":"horizontalBar","legend":"false","xformat":"HH:mm:ss","interpolate":"linear","nodata":"","dot":false,"ymin":"","ymax":"","removeOlder":1,"removeOlderPoints":"","removeOlderUnit":"3600","cutout":0,"useOneColor":true,"colors":["#1f77b4","#aec7e8","#ff7f0e","#2ca02c","#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5"],"useOldStyle":false,"x":1098.7711753845215,"y":331.34532165527344,"wires":[[],[]]},{"id":"1faf9bfe.5f7034","type":"function","z":"ed50f85a.d5c218","name":"format","func":"filter = flow.get(\"filter\");\nvar series = [];\nvar data = [];\nvar labels = [];\nvar m = {};\n\nfor(var prop in filter){\n    series.push(prop)\n}\n\nfor(var i=0; i<Object.keys(msg.payload).length; i++){\n    for(var prop in msg.payload[i]){\n        labels.push(prop);\n        data.push(msg.payload[i][prop]);\n    }\n}\n\nm.labels = labels;\nm.series = [\"Count\"];\nm.data = [data];\n\nmsg.payload = [m];\n\nreturn msg;","outputs":"1","noerr":0,"x":921.2688293457031,"y":333.1812343597412,"wires":[["be6af1e3.3cbde"]]},{"id":"9c3ad063.5d398","type":"ui_group","z":"","name":"Model stats","tab":"2f1b1588.3a1a8a","order":2,"disp":true,"width":"20"},{"id":"2f1b1588.3a1a8a","type":"ui_tab","z":"","name":"BIM Forensics","icon":"dashboard","order":3}]